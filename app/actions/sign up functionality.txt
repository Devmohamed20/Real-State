If the name is less than 2 characters, **Zod** will throw a validation error. However, in your current implementation, the error is not properly formatted for the user. To fix this, we should **catch Zod validation errors** and return them in a user-friendly way.

---

### ✅ **Modify the `signUp` Function to Handle Validation Errors**
Update the `signUp` function to catch and return specific validation errors:

```javascript
export async function signUp(formData) {
  try {
    await connectDB();

    // ✅ Parse and validate input
    const validatedData = signUpSchema.safeParse({
      name: formData.get("name"),
      email: formData.get("email"),
      password: formData.get("password"),
    });

    // ❌ Handle validation errors
    if (!validatedData.success) {
      return { errors: validatedData.error.format() };
    }

    const { name, email, password } = validatedData.data;

    // 🚀 Check if user already exists
    const existingUser = await UserModel.findOne({ email });
    if (existingUser) {
      return { error: "Email already in use" };
    }

    // 🔒 Hash the password
    const hashedPassword = await bcrypt.hash(password, 10);

    // 📝 Create a new user
    const newUser = new UserModel({
      name,
      email,
      password: hashedPassword,
    });

    await newUser.save();

    return { success: "User registered successfully!" };
  } catch (error) {
    return { error: error.message };
  }
}
```

### 🔹 **Why Use `safeParse` Instead of `parse`?**
- `parse()` **throws an error**, which makes error handling difficult.
- `safeParse()` **returns an object** with `{ success: false, error }`, making it easier to handle validation errors.

---

### ✅ **Modify the Sign-Up Form to Display Validation Errors**
In `SignupForm.jsx`, update the UI to show validation errors:

```javascript
"use client";
import { useState } from "react";
import { signUp } from "@/actions/auth/signup";

export default function SignupForm() {
  const [errors, setErrors] = useState({});
  const [message, setMessage] = useState(null);

  async function handleSubmit(event) {
    event.preventDefault();
    const formData = new FormData(event.target);

    const result = await signUp(formData);

    if (result.errors) {
      setErrors(result.errors);
      setMessage(null);
    } else if (result.error) {
      setErrors({});
      setMessage(result.error);
    } else {
      setErrors({});
      setMessage(result.success);
    }
  }

  return (
    <form onSubmit={handleSubmit} className="p-4 border rounded">
      <h2 className="text-xl font-bold mb-2">Sign Up</h2>

      {message && <p className="text-green-500">{message}</p>}

      <div className="mb-2">
        <input type="text" name="name" placeholder="Name" className="block p-2 border" required />
        {errors.name && <p className="text-red-500">{errors.name._errors[0]}</p>}
      </div>

      <div className="mb-2">
        <input type="email" name="email" placeholder="Email" className="block p-2 border" required />
        {errors.email && <p className="text-red-500">{errors.email._errors[0]}</p>}
      </div>

      <div className="mb-2">
        <input type="password" name="password" placeholder="Password" className="block p-2 border" required />
        {errors.password && <p className="text-red-500">{errors.password._errors[0]}</p>}
      </div>

      <button type="submit" className="p-2 bg-blue-500 text-white">Sign Up</button>
    </form>
  );
}
```

---

### 🔹 **How It Works**
1. If `name` is too short (`< 2`), the server action returns:
   ```json
   { "errors": { "name": { "_errors": ["Name must be at least 2 characters"] } } }
   ```
2. The UI **displays the error message** under the input field.
3. If validation passes, the user is registered successfully.

---

### 🚀 **Final Result**
Now, if the user enters a **name that is too short**, they will see an error message like:
🔴 *"Name must be at least 2 characters"* under the input field.

Would you like to add **client-side validation** as well? 🔥